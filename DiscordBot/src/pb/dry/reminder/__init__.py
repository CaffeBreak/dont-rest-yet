# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: reminder.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Task(betterproto.Message):
    id: str = betterproto.string_field(1)
    title: str = betterproto.string_field(2)
    remind_at: datetime = betterproto.message_field(3)
    who: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class Tasks(betterproto.Message):
    tasks: List["Task"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateTaskRequest(betterproto.Message):
    title: str = betterproto.string_field(1)
    remind_at: datetime = betterproto.message_field(2)
    who: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class ListTaskRequest(betterproto.Message):
    who: Optional[str] = betterproto.string_field(1, optional=True, group="_who")


@dataclass(eq=False, repr=False)
class DeleteTaskRequest(betterproto.Message):
    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class UpdateTaskRequest(betterproto.Message):
    id: str = betterproto.string_field(1)
    title: Optional[str] = betterproto.string_field(2, optional=True, group="_title")
    remind_at: Optional[datetime] = betterproto.message_field(
        3, optional=True, group="_remindAt"
    )


class TaskServiceStub(betterproto.ServiceStub):
    async def create_task(
        self,
        create_task_request: "CreateTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Task":
        return await self._unary_unary(
            "/dry.reminder.TaskService/CreateTask",
            create_task_request,
            Task,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_task(
        self,
        list_task_request: "ListTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Tasks":
        return await self._unary_unary(
            "/dry.reminder.TaskService/ListTask",
            list_task_request,
            Tasks,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_task(
        self,
        delete_task_request: "DeleteTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Task":
        return await self._unary_unary(
            "/dry.reminder.TaskService/DeleteTask",
            delete_task_request,
            Task,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_task(
        self,
        update_task_request: "UpdateTaskRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "Task":
        return await self._unary_unary(
            "/dry.reminder.TaskService/UpdateTask",
            update_task_request,
            Task,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class NotificationServiceStub(betterproto.ServiceStub):
    async def push_notification(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["Task"]:
        async for response in self._unary_stream(
            "/dry.reminder.NotificationService/PushNotification",
            betterproto_lib_google_protobuf_empty,
            Task,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class TaskServiceBase(ServiceBase):
    async def create_task(self, create_task_request: "CreateTaskRequest") -> "Task":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_task(self, list_task_request: "ListTaskRequest") -> "Tasks":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_task(self, delete_task_request: "DeleteTaskRequest") -> "Task":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_task(self, update_task_request: "UpdateTaskRequest") -> "Task":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_task(
        self, stream: "grpclib.server.Stream[CreateTaskRequest, Task]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_task(request)
        await stream.send_message(response)

    async def __rpc_list_task(
        self, stream: "grpclib.server.Stream[ListTaskRequest, Tasks]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_task(request)
        await stream.send_message(response)

    async def __rpc_delete_task(
        self, stream: "grpclib.server.Stream[DeleteTaskRequest, Task]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_task(request)
        await stream.send_message(response)

    async def __rpc_update_task(
        self, stream: "grpclib.server.Stream[UpdateTaskRequest, Task]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_task(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/dry.reminder.TaskService/CreateTask": grpclib.const.Handler(
                self.__rpc_create_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateTaskRequest,
                Task,
            ),
            "/dry.reminder.TaskService/ListTask": grpclib.const.Handler(
                self.__rpc_list_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListTaskRequest,
                Tasks,
            ),
            "/dry.reminder.TaskService/DeleteTask": grpclib.const.Handler(
                self.__rpc_delete_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteTaskRequest,
                Task,
            ),
            "/dry.reminder.TaskService/UpdateTask": grpclib.const.Handler(
                self.__rpc_update_task,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateTaskRequest,
                Task,
            ),
        }


class NotificationServiceBase(ServiceBase):
    async def push_notification(
        self,
        betterproto_lib_google_protobuf_empty: "betterproto_lib_google_protobuf.Empty",
    ) -> AsyncIterator["Task"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield Task()

    async def __rpc_push_notification(
        self,
        stream: "grpclib.server.Stream[betterproto_lib_google_protobuf.Empty, Task]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.push_notification,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/dry.reminder.NotificationService/PushNotification": grpclib.const.Handler(
                self.__rpc_push_notification,
                grpclib.const.Cardinality.UNARY_STREAM,
                betterproto_lib_google_protobuf.Empty,
                Task,
            ),
        }
